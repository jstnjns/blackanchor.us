(function() {
  angular.module('ba', ['ba.controllers', 'ba.services']).config(function($interpolateProvider) {
    return $interpolateProvider.startSymbol('[[').endSymbol(']]');
  }).run(function() {
    var components, path, pathname, section;
    pathname = window.location.pathname.substr(1);
    components = pathname.split('/');
    path = components.join('--') || 'home';
    section = components[0] || 'home';
    return $(document.body).addClass("section-" + section + " page-" + path);
  });

  angular.module('ba.controllers', ['ba.controllers.home', 'ba.controllers.product', 'ba.controllers.cart']);

  angular.module('ba.services', ['ba.services.cart']);

  angular.module('ba.controllers.cart', []).controller('cartCtrl', function($scope, $http, Cart) {
    var init, onCartAdd, onCartChange;
    $scope.cart = {};
    init = function() {
      $scope.$on('cart:change', onCartChange);
      $scope.$on('cart:add', onCartAdd);
      return $scope.cart = Cart.cart;
    };
    onCartChange = function(event, cart) {
      return $scope.cart = cart;
    };
    onCartAdd = function(event, product) {
      return $scope.show = true;
    };
    $scope.remove = Cart.remove;
    $scope.update = Cart.update;
    return init();
  });

  angular.module('ba.controllers.home', []).controller('homeCtrl', function($scope, $http, $sce, $window) {
    $http.get('/pages/home').then(function(response) {
      var content, trusted;
      content = $(response.data).find('#dynamic').html();
      trusted = $sce.trustAsHtml(content);
      return $scope.dynamic = trusted;
    });
    return $(window).on('resize', function(event) {
      return $scope.height = this.innerHeight;
    }).trigger('resize');
  });

  Array.prototype.unique = function() {
    var j, key, output, ref, results, value;
    output = {};
    for (key = j = 0, ref = this.length; 0 <= ref ? j < ref : j > ref; key = 0 <= ref ? ++j : --j) {
      output[this[key]] = this[key];
    }
    results = [];
    for (key in output) {
      value = output[key];
      results.push(value);
    }
    return results;
  };

  Array.prototype.like = function(other) {
    var key, value;
    if (other.length !== this.length) {
      return false;
    }
    for (key in other) {
      value = other[key];
      if (this[key] !== value) {
        return false;
      }
    }
    return true;
  };

  Array.prototype.at = function(n) {
    if (n >= 0) {
      return this[n];
    } else {
      return this[this.length + n];
    }
  };

  angular.module('ba.controllers.product', []).controller('productCtrl', function($scope, $http, $sce, $window, Cart) {
    var getDynamicContent, init, onOptionsChange, variantFor;
    $scope.product = window.product;
    $scope.variant = window.variant;
    $scope.options = angular.copy($scope.variant.options);
    $scope.variationsFor = function(option) {
      var i, variations;
      i = $scope.product.options.indexOf(option);
      variations = $scope.product.variants.map(function(variant) {
        return variant.options[i];
      });
      return variations.unique();
    };
    $scope.addToCart = function() {
      return Cart.add($scope.variant.id);
    };
    init = function() {
      $scope.$watch('options', onOptionsChange, true);
      return getDynamicContent();
    };
    onOptionsChange = function(newOptions) {
      return $scope.variant = variantFor(newOptions);
    };
    variantFor = function(options) {
      var variants;
      variants = $scope.product.variants.filter(function(variant) {
        return variant.options.like(options);
      });
      return variants[0];
    };
    getDynamicContent = function() {
      var slug;
      slug = $window.location.pathname.substr(1).split('/').at(-1);
      return $http.get("/pages/" + slug).then(function(response) {
        var content, trusted;
        content = $(response.data).find('#dynamic').html();
        trusted = $sce.trustAsHtml(content);
        $scope.dynamic = trusted;
        return $scope.balls = 'hi';
      });
    };
    return init();
  });

  angular.module('ba.services.cart', []).service('Cart', function($rootScope, $http) {
    return {
      cart: window.cart,
      fetch: function() {
        return $http.get('/cart.js').success((function(_this) {
          return function(response) {
            _this.cart = response;
            return $rootScope.$broadcast('cart:change', _this.cart);
          };
        })(this));
      },
      add: function(id) {
        var product;
        product = {
          id: id,
          quantity: 1
        };
        return $http.post('/cart/add.js', product).success((function(_this) {
          return function(response) {
            var match;
            match = _this.cart.items.filter(function(item, index) {
              console.log(item.id, response.id);
              if (item.id === response.id) {
                return this.cart.items[index] = response;
              }
            });
            if (!match.length) {
              _this.cart.items.push(response);
            }
            _this._calculateTotals();
            _this._broadcastChanage();
            return $rootScope.$broadcast('cart:add', response);
          };
        })(this));
      },
      update: function(id, quantity) {
        var data;
        data = {
          updates: {}
        };
        data.updates[id] = quantity;
        return $http.post('/cart/update.js', data).success((function(_this) {
          return function(response) {
            _this.cart = response;
            return $rootScope.$broadcast('cart:change', _this.cart);
          };
        })(this));
      },
      remove: function(id) {
        var data;
        data = {
          updates: {}
        };
        data.updates[id] = 0;
        return $http.post('/cart/update.js', data).success((function(_this) {
          return function(response) {
            _this.cart = response;
            return $rootScope.$broadcast('cart:change', _this.cart);
          };
        })(this));
      },
      _calculateTotals: function() {
        this.cart.item_count = 0;
        this.cart.total_price = 0;
        return this.cart.items.forEach(function(item) {
          this.cart.item_count += item.quantity;
          return this.cart.total_price += item.line_price;
        });
      },
      _broadcastChanage: function() {
        return $rootScope.$broadcast('cart:change', this.cart);
      }
    };
  });

}).call(this);
